// Bug 1421725 - finalize how changing headers should work
// https://bugzilla.mozilla.org/show_bug.cgi?id=1421725
(function mod_WebRequest(JSM) {
	const { Services } = Components.utils.import("resource://gre/modules/Services.jsm");

	const HttpObserverManager = JSM.HttpObserverManager;
	const pObject = HttpObserverManager.constructor;

	// Capture RequestHeaderChanger
	let captured_requestHeaders;
	let captured_responseHeaders;
	let dummy_HttpObserverManager = {
		__proto__: HttpObserverManager,
		FILTER_TYPES: {
			has: function(x) {
				return false;
			}
		},
		listeners: {
			dummy: {
				forEach: function(callback) {
					callback({
						__proto__: null,
						requestHeaders: [],
						responseHeaders: []
					}, function() {})
				}
			}
		},
		getRequestData: function() {
			return null;
		},
		applyChanges: function(kind, channel, handlerResults, requestHeaders, responseHeaders) {
			captured_requestHeaders = requestHeaders;
			captured_responseHeaders = responseHeaders;
		}
	};
	let dummy_channel = {
		__proto__: null,
		matches: function() {
			return true;
		},
		getRequestHeaders: function() {
			return [];
		},
		getResponseHeaders: function() {
			return [];
		}
	};
	dummy_HttpObserverManager.runChannelListener(dummy_channel, 'dummy');

	// Get HeaderChanger.prototype
	let RequestHeaderChanger_prototype = Reflect.getPrototypeOf(captured_requestHeaders);
	let HeaderChanger_prototype = Reflect.getPrototypeOf(RequestHeaderChanger_prototype);

	// [1] Monkey-patch HeaderChanger.prototype
	HeaderChanger_prototype.rereadHeaders = function rereadHeaders(headers, opts) {
		this.array = this.readHeaders();
		this.map = null;
	};

	// [2] Monkey-patch HttpObserverManager
	const Cu = Components.utils;
	const { Services } = Cu.import("resource://gre/modules/Services.jsm");
	const Cr = Components.results;
	const WebRequestUpload = JSM.WebRequestUpload;
	const RequestHeaderChanger = captured_requestHeaders.constructor;
	const ResponseHeaderChanger = captured_responseHeaders.constructor;
	const isThenable = JSM.isThenable;
	HttpObserverManager.runChannelListener = async function runChannelListener(channel, kind, extraData = null) {
		let context = {
			commonData: null,
			requestHeaders: null,
			responseHeaders: null,
			requestBody: null,
			shouldResume: null
		};

		try {
			if (kind !== "onError" && channel.errorString) {
				return;
			}

			let registerFilter = this.FILTER_TYPES.has(kind);
			let _sequence = [];

			this.listeners[kind].forEach((opts, callback) => {
				if (!channel.matches(opts.filter, opts.extension, extraData)) {
					return;
				}

				if (opts.blocking) {
					_sequence.push([opts, callback]);
					return;
				}

				this.callOneListener(channel, kind, extraData, registerFilter, context, [opts, callback]);
			});

			let shouldApply = true;
			if (_sequence.length) {
				for (let listener of _sequence) {
					let handlerResult = this.callOneListener(channel, kind, extraData, registerFilter, context, listener);
					if (handlerResult && shouldApply) {
						let canceledOrRedirected = await this.applyChanges1(kind, channel, [handlerResult], context);
						if (canceledOrRedirected) {
							shouldApply = false;
						}
					}
				}
			}
		} catch (e) {
			Cu.reportError(e);
		}

		return await this.applyChanges2(kind, channel, context);
	};
	HttpObserverManager.callOneListener = function callOneListener(channel, kind, extraData, registerFilter, context, listener) {
		let commonData = context.commonData;
		if (!commonData) {
			commonData = this.getRequestData(channel, extraData);
			if (this.STATUS_TYPES.has(kind)) {
				commonData.statusCode = channel.statusCode;
				commonData.statusLine = channel.statusLine;
			}
			context.commonData = commonData;
		}
		let data = pObject.create(commonData);

		let [opts, callback] = listener;
		if (registerFilter && opts.blocking && opts.extension) {
			channel.registerTraceableChannel(opts.extension, opts.tabParent);
		}

		if (opts.requestHeaders) {
			let requestHeaders = context.requestHeaders;
			if (!requestHeaders) {
				requestHeaders = new RequestHeaderChanger(channel);
				context.requestHeaders = requestHeaders;
			}
			data.requestHeaders = requestHeaders.toArray();
		}

		if (opts.responseHeaders) {
			try {
				let responseHeaders = context.responseHeaders;
				if (!responseHeaders) {
					responseHeaders = new ResponseHeaderChanger(channel);
					context.responseHeaders = responseHeaders;
				}
				data.responseHeaders = responseHeaders.toArray();
			} catch (e) {
				/* headers may not be available on some redirects */ }
		}

		if (opts.requestBody && channel.canModify) {
			let requestBody = context.requestBody;
			if (!requestBody) {
				requestBody = WebRequestUpload.createRequestBody(channel.channel);
				context.requestBody = requestBody;
			}
			data.requestBody = requestBody;
		}

		try {
			let result = callback(data);

			// isProxy is set during onAuth if the auth request is for a proxy.
			// We allow handling proxy auth regardless of canModify.
			if ((channel.canModify || data.isProxy) && typeof result === "object" && opts.blocking) {
				return { opts, result };
			}
		} catch (e) {
			Cu.reportError(e);
		}
	};
	HttpObserverManager.applyChanges1 = async function applyChanges1(kind, channel, handlerResults, context) {
		let { requestHeaders, responseHeaders } = context;

		let shouldResume;
		if (context.shouldResume === null) {
			shouldResume = !channel.suspended;
			context.shouldResume = shouldResume;
		}

		try {
			for (let { opts, result } of handlerResults) {
				if (isThenable(result)) {
					channel.suspended = true;
					try {
						result = await result;
					} catch (e) {
						let error;

						if (e instanceof Error) {
							error = e;
						} else if (typeof e === "object" && e.message) {
							error = new Error(e.message, e.fileName, e.lineNumber);
						}

						Cu.reportError(error);
						continue;
					}
					if (!result || typeof result !== "object") {
						continue;
					}
				}

				if (kind === "authRequired" && result.authCredentials && channel.authPromptCallback) {
					channel.authPromptCallback(result.authCredentials);
				}

				// We allow proxy auth to cancel or handle authCredentials regardless of
				// canModify, but ensure we do nothing else.
				if (!channel.canModify) {
					continue;
				}

				if (result.cancel) {
					channel.suspended = false;
					channel.cancel(Cr.NS_ERROR_ABORT);
					return true;
				}

				if (result.redirectUrl) {
					try {
						channel.suspended = false;
						channel.redirectTo(Services.io.newURI(result.redirectUrl));
						// Web Extensions using the WebRequest API are allowed
						// to redirect a channel to a data: URI, hence we mark
						// the channel to let the redirect blocker know. Please
						// note that this markind needs to happen after the
						// channel.redirectTo is called because the channel's
						// RedirectTo() implementation explicitly drops the flag
						// to avoid additional redirects not caused by the
						// Web Extension.
						channel.loadInfo.allowInsecureRedirectToDataURI = true;
						return true;
					} catch (e) {
						Cu.reportError(e);
					}
				}

				if (result.upgradeToSecure && kind === "opening") {
					try {
						channel.upgradeToSecure();
					} catch (e) {
						Cu.reportError(e);
					}
				}

				if (opts.requestHeaders && result.requestHeaders && requestHeaders) {
					requestHeaders.applyChanges(result.requestHeaders, opts);
					requestHeaders.rereadHeaders();
				}

				if (opts.responseHeaders && result.responseHeaders && responseHeaders) {
					responseHeaders.applyChanges(result.responseHeaders, opts);
					responseHeaders.rereadHeaders();
				}
			}
		} catch (e) {
			Cu.reportError(e);
		}
	};
	HttpObserverManager.applyChanges2 = async function applyChanges2(kind, channel, context) {
		let shouldResume = context.shouldResume;

		try {
			// If a listener did not cancel the request or provide credentials, we
			// forward the auth request to the base handler.
			if (kind === "authRequired" && channel.authPromptForward) {
				channel.authPromptForward();
			}

			if (kind === "modify" && this.listeners.afterModify.size) {
				await this.runChannelListener(channel, "afterModify");
			} else if (kind !== "onError") {
				channel.errorCheck();
			}
		} catch (e) {
			Cu.reportError(e);
		}

		// Only resume the channel if it was suspended by this call.
		if (shouldResume) {
			channel.suspended = false;
		}
	};
})(Components.utils.import("resource://gre/modules/WebRequest.jsm", {}));
