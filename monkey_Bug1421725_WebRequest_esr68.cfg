// Bug 1421725 - finalize how changing headers should work
// https://bugzilla.mozilla.org/show_bug.cgi?id=1421725
(function mod_WebRequest(JSM) {
	const HttpObserverManager = JSM.HttpObserverManager;
	const pObject = HttpObserverManager.constructor;

	// Capture RequestHeaderChanger
	let captured_requestHeaders;
	let captured_responseHeaders;
	let dummy_HttpObserverManager = {
		__proto__: HttpObserverManager,
		FILTER_TYPES: {
			has: function (x) {
				return false;
			}
		},
		listeners: {
			dummy: {
				forEach: function (callback) {
					callback({
						__proto__: null,
						requestHeaders: [],
						responseHeaders: []
					}, function () {})
				}
			}
		},
		getRequestData: function () {
			return null;
		},
		applyChanges: function (kind, channel, handlerResults, requestHeaders, responseHeaders) {
			captured_requestHeaders = requestHeaders;
			captured_responseHeaders = responseHeaders;
		}
	};
	let dummy_channel = {
		__proto__: null,
		matches: function () {
			return true;
		},
		getRequestHeaders: function () {
			return [];
		},
		getResponseHeaders: function () {
			return [];
		}
	};
	dummy_HttpObserverManager.runChannelListener(dummy_channel, 'dummy');

	// Get HeaderChanger.prototype
	let RequestHeaderChanger_prototype = Reflect.getPrototypeOf(captured_requestHeaders);
	let HeaderChanger_prototype = Reflect.getPrototypeOf(RequestHeaderChanger_prototype);

	// Class ListenerRunner
	const Cu = Components.utils;
	const Cr = Components.results;
	const WebRequestUpload = JSM.WebRequestUpload;
	const RequestHeaderChanger = captured_requestHeaders.constructor;
	const ResponseHeaderChanger = captured_responseHeaders.constructor;
	const isThenable = JSM.isThenable;
	class ListenerRunner {
		constructor(channel, kind) {
			this.channel = channel;
			this.kind = kind;

			this.registerFilter = HttpObserverManager.FILTER_TYPES.has(kind);
			this.hasAwaited = false;
			this.shouldResume = false;
		}

		async callListeners() {
			let shouldApply = true;

			for (let [callback, opts] of HttpObserverManager.listeners[this.kind]) {
				if (!this.channel.matches(opts.filter, opts.extension, this.extraData)) {
					continue;
				}

				let result = this.callOneListener(opts, callback);
				if (!opts.blocking || !result || !shouldApply) {
					continue;
				}

				if (isThenable(result)) {
					result = await this.awaitResult(result);
					if (!result) {
						continue;
					}
				}

				if (this.applyChanges1(opts, result)) {
					shouldApply = false;
				}
			}

			return await this.applyChanges2();
		}

		createData(opts) {
			if (!this.commonData) {
				let commonData = HttpObserverManager.getRequestData(this.channel, this.extraData);
				if (HttpObserverManager.STATUS_TYPES.has(this.kind)) {
					commonData.statusCode = this.channel.statusCode;
					commonData.statusLine = this.channel.statusLine;
				}
				this.commonData = commonData;
			}

			let data = pObject.create(this.commonData);

			if (this.registerFilter && opts.blocking && opts.extension) {
				data.registerTraceableChannel = (extension, remoteTab) => {
					// `channel` is a ChannelWrapper, which contains the actual
					// underlying nsIChannel in `channel.channel`.  For startup events
					// that are held until the extension background page is started,
					// it is possible that the underlying channel can be closed and
					// cleaned up between the time the event occurred and the time
					// we reach this code.
					if (this.channel.channel) {
						this.channel.registerTraceableChannel(extension, remoteTab);
					}
				};
			}

			if (opts.requestHeaders) {
				if (!this.requestHeaders) {
					this.requestHeaders = new RequestHeaderChanger(this.channel);
				}
				data.requestHeaders = this.requestHeaders.toArray();
			}

			if (opts.responseHeaders) {
				try {
					if (!this.responseHeaders) {
						this.responseHeaders = new ResponseHeaderChanger(this.channel);
					}
					data.responseHeaders = this.responseHeaders.toArray();
				} catch (e) {
					/* headers may not be available on some redirects */
				}
			}

			if (opts.requestBody && this.channel.canModify) {
				if (!this.requestBody) {
					this.requestBody = WebRequestUpload.createRequestBody(this.channel.channel);
				}
				data.requestBody = this.requestBody;
			}

			return data;
		}

		callOneListener(opts, callback) {
			let data = this.createData(opts);

			try {
				let result = callback(data);

				// isProxy is set during onAuth if the auth request is for a proxy.
				// We allow handling proxy auth regardless of canModify.
				if (
					(this.channel.canModify || data.isProxy) &&
					typeof result === "object" &&
					opts.blocking
				) {
					return result;
				}
			} catch (e) {
				Cu.reportError(e);
			}

			return null;
		}

		async awaitResult(result) {
			if (!this.hasAwaited) {
				this.shouldResume = !this.channel.suspended;
				this.hasAwaited = true;
			}

			this.channel.suspended = true;
			try {
				result = await result;
			} catch (e) {
				let error;

				if (e instanceof Error) {
					error = e;
				} else if (typeof e === "object" && e.message) {
					error = new Error(e.message, e.fileName, e.lineNumber);
				}

				Cu.reportError(error);
				return null;
			}
			if (!result || typeof result !== "object") {
				return null;
			}
			return result;
		}

		applyChanges1(opts, result) {
			try {
				if (
					this.kind === "authRequired" &&
					result.authCredentials &&
					this.channel.authPromptCallback
				) {
					this.channel.authPromptCallback(result.authCredentials);
				}

				// We allow proxy auth to cancel or handle authCredentials regardless of
				// canModify, but ensure we do nothing else.
				if (!this.channel.canModify) {
					return false;
				}

				if (result.cancel) {
					this.channel.suspended = false;
					this.channel.cancel(Cr.NS_ERROR_ABORT);
					return true;
				}

				if (result.redirectUrl) {
					try {
						this.channel.suspended = false;
						this.channel.redirectTo(Services.io.newURI(result.redirectUrl));
						// Web Extensions using the WebRequest API are allowed
						// to redirect a channel to a data: URI, hence we mark
						// the channel to let the redirect blocker know. Please
						// note that this markind needs to happen after the
						// channel.redirectTo is called because the channel's
						// RedirectTo() implementation explicitly drops the flag
						// to avoid additional redirects not caused by the
						// Web Extension.
						channel.loadInfo.allowInsecureRedirectToDataURI = true;
						return true;
					} catch (e) {
						Cu.reportError(e);
					}
				}

				if (result.upgradeToSecure && this.kind === "opening") {
					try {
						this.channel.upgradeToSecure();
					} catch (e) {
						Cu.reportError(e);
					}
				}

				if (opts.requestHeaders && result.requestHeaders && this.requestHeaders) {
					this.requestHeaders.applyChanges(result.requestHeaders, opts);
					this.requestHeaders.rereadHeaders();
				}

				if (opts.responseHeaders && result.responseHeaders && this.responseHeaders) {
					this.responseHeaders.applyChanges(result.responseHeaders, opts);
					this.responseHeaders.rereadHeaders();
				}
			} catch (e) {
				Cu.reportError(e);
			}

			return false;
		}
		async applyChanges2() {
			try {
				// If a listener did not cancel the request or provide credentials, we
				// forward the auth request to the base handler.
				if (this.kind === "authRequired" && this.channel.authPromptForward) {
					this.channel.authPromptForward();
				}

				if (this.kind === "modify" && HttpObserverManager.listeners.afterModify.size) {
					await HttpObserverManager.runChannelListener(this.channel, "afterModify");
				} else if (this.kind !== "onError") {
					this.channel.errorCheck();
				}
			} catch (e) {
				Cu.reportError(e);
			}

			// Only resume the channel if it was suspended by this call.
			if (this.shouldResume) {
				this.channel.suspended = false;
			}
		}
	}

	// Monkey-patch HeaderChanger.prototype
	HeaderChanger_prototype.rereadHeaders = function rereadHeaders() {
		this.array = this.readHeaders();
		this.map = null;
	};

	// Monkey-patch HttpObserverManager
	HttpObserverManager.runChannelListener = function runChannelListener(channel, kind, extraData = null) {
		let runner = new ListenerRunner(channel, kind);
		runner.extraData = extraData;
		return runner.callListeners();
	};
	HttpObserverManager.applyChanges = async function applyChanges(kind, channel, handlerResults, requestHeaders, responseHeaders) {
		let runner = new ListenerRunner(channel, kind);
		runner.requestHeaders = requestHeaders;
		runner.responseHeaders = responseHeaders;

		for (let {opts, result} of handlerResults) {
			if (isThenable(result)) {
				result = await runner.awaitResult(result);
				if (!result) {
					continue;
				}
			}
			if (runner.applyChanges1(opts, result)) {
				break;
			}
		}
		return await runner.applyChanges2();
	};
})(Components.utils.import("resource://gre/modules/WebRequest.jsm", {}));